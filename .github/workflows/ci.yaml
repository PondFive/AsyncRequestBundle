name: Pond5 Async Request Bundle

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

jobs:
  phpunit:
    name: PHPUnit
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - php-version: 7.4
            composer-flags: "--prefer-lowest"
            symfony-require: "5.2.*"
          - php-version: 7.4
            symfony-require: "5.2.*"
          - php-version: 7.4
            symfony-require: "5.3.*"
          - php-version: 7.4
            symfony-require: "5.4.*"
          - php-version: 8.0
            symfony-require: "5.4.*"
          - php-version: 8.0
            symfony-require: "6.0.*"
            coverage: yes
          - php-version: 8.1

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Install PHP with XDebug"
        uses: shivammathur/setup-php@v2
        if: "${{ matrix.coverage != '' }}"
        with:
          php-version: "${{ matrix.php-version }}"
          coverage: "xdebug"

      - name: "Install PHP without coverage"
        uses: shivammathur/setup-php@v2
        if: "${{ matrix.coverage == '' }}"
        with:
          php-version: "${{ matrix.php-version }}"
          coverage: "none"

      - name: "Get composer cache directory"
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: "Cache composer dependencies"
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: "Install dependencies with composer"
        env:
          SYMFONY_REQUIRE: "${{ matrix.symfony-require }}"
        run: |
          composer global require --no-progress --no-scripts --no-plugins symfony/flex
          composer update --no-interaction --no-progress ${{ matrix.composer-flags }}

      - name: "Run PHPUnit with coverage"
        env:
          CODECOV_TOKEN: "${{ secrets.CODECOV_TOKEN }}"
        if: "${{ matrix.coverage != '' }}"
        run: |
          XDEBUG_MODE=coverage bin/phpunit --coverage-clover=coverage.xml
          bash <(curl -s https://codecov.io/bash)

      - name: "Run PHPUnit without coverage"
        if: "${{ matrix.coverage == '' }}"
        run: bin/phpunit

  phpcs:
    name: PHP Code Sniffer
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: "Get composer cache directory"
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: "Cache composer dependencies"
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: "Install dependencies with composer"
        run: composer update --no-interaction --no-progress

      - name: "Run PHP Code Sniffer"
        run: bin/phpcs -p

  phpstan:
    name: PHPStan
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Get composer cache directory"
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: "Cache composer dependencies"
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: "Install dependencies with composer"
        run: composer update --no-interaction --no-progress

      - name: "Run PHPStan Static Analysis (src)"
        run: bin/phpstan analyse -c .phpstan/src.neon

      - name: "Run PHPStan Static Analysis (tests)"
        run: bin/phpstan analyse -c .phpstan/tests.neon
